// <auto-generated />
using System;
using EdufyAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EdufyAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnectAPI.Models.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProgressId")
                        .IsUnique();

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("EdufyAPI.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "1c700ea4-ac54-487f-80e4-25c7b348b9e0",
                            Description = "Learn the basics of C# programming, including syntax, OOP concepts, and best practices.",
                            InstructorId = "58ec4bbf-4913-4dc1-96b7-381159ce0878",
                            ThumbnailUrl = "csharp_course_thumbnail.jpg",
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            Id = "2d7df053-81d5-4bb8-994d-76619c341c46",
                            Description = "Deep dive into .NET framework, dependency injection, middleware, and microservices.",
                            InstructorId = "a86582e6-8511-4b78-b548-e17a2eaf0d3e",
                            ThumbnailUrl = "dotnet_course_thumbnail.jpg",
                            Title = "Advanced .NET Development"
                        });
                });

            modelBuilder.Entity("EdufyAPI.Models.Enrollment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollment");

                    b.HasData(
                        new
                        {
                            StudentId = "626b8c7f-f4d4-4467-bb37-570f1aa6fd77",
                            CourseId = "1c700ea4-ac54-487f-80e4-25c7b348b9e0"
                        },
                        new
                        {
                            StudentId = "626b8c7f-f4d4-4467-bb37-570f1aa6fd77",
                            CourseId = "2d7df053-81d5-4bb8-994d-76619c341c46"
                        },
                        new
                        {
                            StudentId = "e452e625-327a-4bf2-9540-3db6577ab68f",
                            CourseId = "1c700ea4-ac54-487f-80e4-25c7b348b9e0"
                        },
                        new
                        {
                            StudentId = "e452e625-327a-4bf2-9540-3db6577ab68f",
                            CourseId = "2d7df053-81d5-4bb8-994d-76619c341c46"
                        });
                });

            modelBuilder.Entity("EdufyAPI.Models.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("EdufyAPI.Models.Progress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalLessonsCompleted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = "PROG-1001",
                            CourseId = "1c700ea4-ac54-487f-80e4-25c7b348b9e0",
                            LastUpdated = new DateTime(2025, 4, 2, 4, 55, 53, 985, DateTimeKind.Utc).AddTicks(7525),
                            StudentId = "626b8c7f-f4d4-4467-bb37-570f1aa6fd77",
                            TotalLessonsCompleted = 5
                        },
                        new
                        {
                            Id = "PROG-1002",
                            CourseId = "1c700ea4-ac54-487f-80e4-25c7b348b9e0",
                            LastUpdated = new DateTime(2025, 4, 2, 4, 55, 53, 985, DateTimeKind.Utc).AddTicks(7532),
                            StudentId = "e452e625-327a-4bf2-9540-3db6577ab68f",
                            TotalLessonsCompleted = 7
                        },
                        new
                        {
                            Id = "PROG-1003",
                            CourseId = "2d7df053-81d5-4bb8-994d-76619c341c46",
                            LastUpdated = new DateTime(2025, 4, 2, 4, 55, 53, 985, DateTimeKind.Utc).AddTicks(7536),
                            StudentId = "626b8c7f-f4d4-4467-bb37-570f1aa6fd77",
                            TotalLessonsCompleted = 10
                        },
                        new
                        {
                            Id = "PROG-1004",
                            CourseId = "2d7df053-81d5-4bb8-994d-76619c341c46",
                            LastUpdated = new DateTime(2025, 4, 2, 4, 55, 53, 985, DateTimeKind.Utc).AddTicks(7541),
                            StudentId = "e452e625-327a-4bf2-9540-3db6577ab68f",
                            TotalLessonsCompleted = 12
                        });
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.QuizAttemp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProgressId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.StudentAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizResultId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedAnswerIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizResultId");

                    b.ToTable("StudentAnswer");
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.Admin", b =>
                {
                    b.HasBaseType("EdufyAPI.Models.Roles.AppUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.Instructor", b =>
                {
                    b.HasBaseType("EdufyAPI.Models.Roles.AppUser");

                    b.HasDiscriminator().HasValue("Instructor");

                    b.HasData(
                        new
                        {
                            Id = "58ec4bbf-4913-4dc1-96b7-381159ce0878",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d2d80f8-2a01-4fae-807e-c95e616863d4",
                            Email = "omar.tarek@example.com",
                            EmailConfirmed = false,
                            FirstName = "Omar",
                            LastName = "Tarek",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMAR.TAREK@EXAMPLE.COM",
                            NormalizedUserName = "OMAR.TAREK",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAQ0oa4ArUNOD2WX+YEVMzYmbWXQ68gmNFB2Bnf5tbIgXaaO169FmQv5N3yMm05OQ==",
                            PhoneNumber = "1122334455",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            SecurityStamp = "91fcc28c-5cd5-4349-8fd9-c9dac4189fa1",
                            TwoFactorEnabled = false,
                            UserName = "omar.tarek"
                        },
                        new
                        {
                            Id = "a86582e6-8511-4b78-b548-e17a2eaf0d3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f468abe3-ef6d-4493-b69c-07f66317ec13",
                            Email = "hana.mostafa@example.com",
                            EmailConfirmed = false,
                            FirstName = "Hana",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NormalizedEmail = "HANA.MOSTAFA@EXAMPLE.COM",
                            NormalizedUserName = "HANA.MOSTAFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAiM8WxWli2V7srdU9nY5Gxtd92lUDmQ/9ve7SFxdamJMS36k/zTQe9R38aHzkHNGQ==",
                            PhoneNumber = "5566778899",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            SecurityStamp = "df129406-5091-45bb-80da-c3c10f3b93d2",
                            TwoFactorEnabled = false,
                            UserName = "hana.mostafa"
                        });
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.Student", b =>
                {
                    b.HasBaseType("EdufyAPI.Models.Roles.AppUser");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "626b8c7f-f4d4-4467-bb37-570f1aa6fd77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f102c648-90a0-47ae-9182-9afe5120638f",
                            Email = "ali.mahmoud@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            LastName = "Mahmoud",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.MAHMOUD@EXAMPLE.COM",
                            NormalizedUserName = "ALI.MAHMOUD",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNmy/dG0t5S/77VMtsokdH2d7j7nhIVG3+O7KgKMvo/373PilQZg0NvGbMIoUb8hw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            SecurityStamp = "76ae1c98-894a-4a53-aa7b-85c6481d92b8",
                            TwoFactorEnabled = false,
                            UserName = "ali.mahmoud"
                        },
                        new
                        {
                            Id = "e452e625-327a-4bf2-9540-3db6577ab68f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28ee6904-d38e-47d3-a3ce-bfc24e689350",
                            Email = "salma.ahmed@example.com",
                            EmailConfirmed = false,
                            FirstName = "Salma",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALMA.AHMED@EXAMPLE.COM",
                            NormalizedUserName = "SALMA.AHMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEESKx3ptzJ4nJDQnCBfVjT8lXoMTUm8EiJJIQ7YU4gwkJ2gwOsU9ST9x1gyTZgoyNA==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "",
                            SecurityStamp = "59128164-4061-4e4b-9e2e-414824298d2b",
                            TwoFactorEnabled = false,
                            UserName = "salma.ahmed"
                        });
                });

            modelBuilder.Entity("EduConnectAPI.Models.Certificate", b =>
                {
                    b.HasOne("EdufyAPI.Models.Progress", "Progress")
                        .WithOne("Certificate")
                        .HasForeignKey("EduConnectAPI.Models.Certificate", "ProgressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("EdufyAPI.Models.Course", b =>
                {
                    b.HasOne("EdufyAPI.Models.Roles.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EdufyAPI.Models.Enrollment", b =>
                {
                    b.HasOne("EdufyAPI.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.Roles.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EdufyAPI.Models.Lesson", b =>
                {
                    b.HasOne("EdufyAPI.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EdufyAPI.Models.Progress", b =>
                {
                    b.HasOne("EdufyAPI.Models.Course", "Course")
                        .WithMany("CourseProgress")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.Roles.Student", null)
                        .WithMany("Progresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.Enrollment", "Enrollment")
                        .WithOne("Progress")
                        .HasForeignKey("EdufyAPI.Models.Progress", "StudentId", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Answer", b =>
                {
                    b.HasOne("EdufyAPI.Models.QuizModels.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Question", b =>
                {
                    b.HasOne("EdufyAPI.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Quiz", b =>
                {
                    b.HasOne("EdufyAPI.Models.Lesson", "Lesson")
                        .WithOne("Quiz")
                        .HasForeignKey("EdufyAPI.Models.QuizModels.Quiz", "LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.QuizAttemp", b =>
                {
                    b.HasOne("EdufyAPI.Models.Progress", "Progress")
                        .WithMany("QuizAttemps")
                        .HasForeignKey("ProgressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("QuizResult")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.Roles.Student", "Student")
                        .WithMany("QuizAttemps")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Progress");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.StudentAnswer", b =>
                {
                    b.HasOne("EdufyAPI.Models.QuizModels.Answer", "Answer")
                        .WithOne("StudentAnswer")
                        .HasForeignKey("EdufyAPI.Models.QuizModels.StudentAnswer", "AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.QuizModels.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.QuizModels.QuizAttemp", "QuizResult")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuizResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EdufyAPI.Models.Roles.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EdufyAPI.Models.Roles.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EdufyAPI.Models.Roles.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EdufyAPI.Models.Roles.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EdufyAPI.Models.Course", b =>
                {
                    b.Navigation("CourseProgress");

                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("EdufyAPI.Models.Enrollment", b =>
                {
                    b.Navigation("Progress")
                        .IsRequired();
                });

            modelBuilder.Entity("EdufyAPI.Models.Lesson", b =>
                {
                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("EdufyAPI.Models.Progress", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("QuizAttemps");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Answer", b =>
                {
                    b.Navigation("StudentAnswer")
                        .IsRequired();
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("EdufyAPI.Models.QuizModels.QuizAttemp", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EdufyAPI.Models.Roles.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Progresses");

                    b.Navigation("QuizAttemps");
                });
#pragma warning restore 612, 618
        }
    }
}
